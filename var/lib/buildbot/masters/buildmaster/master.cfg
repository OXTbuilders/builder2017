# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("openxt1", "password"),
               BuildSlave("openxt2", "password"),
               BuildSlave("legacy",  "password"),
               BuildSlave("windows", "password")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
#c['change_source'].append(GitPoller(
#        'git://github.com/buildbot/pyflakes.git',
#        workdir='gitpoller-workdir', branch='master',
#        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
#c['schedulers'].append(SingleBranchScheduler(
#                            name="all",
#                            change_filter=filter.ChangeFilter(branch='master'),
#                            treeStableTimer=None,
#                            builderNames=["runtests"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["openxt", "legacy", "windows"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import Compile
from buildbot.process.properties import Property

factory = BuildFactory()
#factory.addStep(Compile(command=["bash", "-e", "./build.sh", Property('buildnumber'), Property('branch'),Property('layers'), Property('repos'), Property('ticket'), Property('distro')], name="Build", description="Build", descriptionDone="Built", timeout=12000))
factory.addStep(Compile(command=["bash", "-e", "./build.sh", Property('buildnumber'), Property('branch')], name="Build", description="Build", descriptionDone="Built", timeout=12000))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="openxt",
      slavenames=["openxt1", "openxt2"],
      factory=factory))

legacyfactory = BuildFactory()
#legacyfactory.addStep(Compile(command=["fixme.sh", Property('buildnumber'), Property('branch'), Property('repository')], name="Build", description="Build", descriptionDone="Built"))
legacyfactory.addStep(Compile(command=["bash", "-e", "./fetch.sh", Property('buildnumber')], name="Fetch", timeout=12000, description="Fetch", descriptionDone="Fetched"))
legacyfactory.addStep(Compile(command=["bash", "-e", "./clean.sh"], name="Clean", timeout=12000, description="Clean", descriptionDone="Cleaned"))
#legacyfactory.addStep(Compile(command=["bash", "-e", "./build.sh", Property('buildnumber'), Property('branch'), Property('layers'), Property('repos'), Property('ticket'), Property('distro')], name="Build", timeout=12000, description="Build", descriptionDone="Built"))
legacyfactory.addStep(Compile(command=["bash", "-e", "./build.sh", Property('buildnumber'), Property('branch')], name="Build", timeout=12000, description="Build", descriptionDone="Built"))
legacyfactory.addStep(Compile(command=["bash", "-e", "./copy.sh", Property('buildnumber'), Property('branch')],  name="Copy",  timeout=12000, description="Copy",  descriptionDone="Copied"))


c['builders'].append(
    BuilderConfig(name="legacy",
      slavenames=["legacy"],
      factory=legacyfactory))

winfactory = BuildFactory()
winfactory.addStep(Compile(command=["build.bat", Property('buildnumber'), Property('branch'), Property('repository')], name="Build", description="Build", descriptionDone="Built"))

c['builders'].append(
    BuilderConfig(name="windows",
      slavenames=["windows"],
      factory=winfactory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
#    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    auth=auth.HTPasswdAuth('/var/lib/buildbot/masters/buildmaster/.htpasswd'),
    gracefulShutdown = 'auth',
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OpenXT"
c['titleURL'] = "https://github.com/OpenXT"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://158.69.127.120:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
